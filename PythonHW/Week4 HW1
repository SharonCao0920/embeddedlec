#Author: Sharon Cao     Date: 9/25/2019
#Description:
#1. Build up a function to implement the following operation

 """Return true_result if condition is a true value, and
 false_result otherwise.
 >>> if_function(True, 2, 3)
 2
 >>> if_function(False, 2, 3)
 3
 >>> if_function(3==2, 3+2, 3-2)
 1
 >>> if_function(3>2, 3+2, 3-2)
 5
 """
 def if_function(condition, true_result, false_result):
  
  if condition:
    return true_result
  else:
    return false_result
"""Sample
>>>print(if_function(3<2, 3+2, 3-2)) 
1
>>>print(if_function(3>2, 3+2, 3-2)) 
5
"""

#Author: Sharon Cao     Date: 9/25/2019
#Description:
#2. Create a function to add odd numbers less equal than numeric input parameter together
#as follows
"""
>>> sum_odd(6) #1+3+5
9
>>>sum_odd(7) #1+3+5+7
16
"""
def sum_odd(n):
  i=1
  total=0
  while i<=n:
    if i%2 != 0:
      total += i
    i += 1
  print (total)
  
"""
 Sample
 >>>sum_odd(7)
 16
 """
 
 
 
#Author: Sharon Cao     Date: 9/25/2019
#Description: 
#3. Define a function for 4 inputs a, b, c, d, and return sum of square of two smallest
#number from a, b, c and d, such as
"""
>>> foo(1, 2, 3, 4)
>>> 5 #
>>> foo(-3, 1, 5, 6)
>>> 10 #
"""
def foo (a, b, c, d):
  x = [a, b, c, d]
  x.sort()
  #print (x)
  return print (sqr(x[0])+ sqr(x[1]))

def sqr (n):
  return n*n


"""
Sample
>>>foo (-3, 5, 6, 1)
10
"""
  
#Author: Sharon Cao     Date: 9/25/2019
#Description: 
#4. Write a function named “df” that takes three integers x, y, and z. It returns whether
#subtracting one of these numbers from another gives the third.
"""
 >>> df(5, 3, 2) # 5 - 3 is 2
 True
 >>> df(2, 3, 5) # 5 - 3 is 2
 True
 >>> df(2, 5, 3) # 5 - 3 is 2
 True
 >>> df(-2, 3, 5) # 3 - 5 is -2
 True
 >>> df(-5, -3, -2) # -5 - -2 is -3
 True
 >>> df(-2, 3, -5) # -2 - 3 is -5
 True
 >>> df(2, 3, -5)
 False
 >>> df(10, 6, 4)
 True
 >>> df(10, 6, 3)
False
"""
def df (x, y, z):
  if x-y==z:
    print ("True")
  elif x-z==y:
    print ("True")
  elif y-z==x:
    print ("True")
  elif y-x==z:
    print ("True")
  elif z-x==y:
    print ("True");
  elif z-y==x:
    print ("True");
  else :
    print ("False");
"""
Sample
>>>df (3, 5, 2)
>>>df (6, 8, 1) 
True
False
"""

#Author: Sharon Cao     Date: 9/25/2019
#Description:
#5. Create a function that takes an integer m greater than 1 and returns the largest integer
#smaller than m that evenly divides m.
"""Return the largest factor of n that is smaller than n.
 >>> lrgst_factor (15) # factors are 1, 3, 5
 5
 >>> lrgst_factor (80) # factors are 1, 2, 4, 5, 8, 10, 16, 20, 40
 40
"""
def lrgst_factor(m):
  n=m-1
  while n>=1:
    if m%n==0:
      print (n)
      break
    else:
      n=n-1
      
""" Sample
>>>lrgst_factor(80)
40
"""

#Author: Sharon Cao     Date: 9/25/2019
#Description:
#6. Define a function which takes in a number n and determines whether the number is a
#perfect number. A perfect number is equal to the sum of its factors. For instance, 6 is a perfect
#number since 6 = 1 + 2 + 3.

 """
 Returns True or False indicating whether ‘n’ is a perfect
 number. A number is a perfect number when the sum of all its
 factors equal the number itself.
 >>> pfct_num (6)
 True
 >>> pfct_num (8)
 False
 >>> pfct_num (28)
True
"""
def pfct_num(m):
  n=m-1
  total=0
  while n>=1:
    if m%n==0:
      total=total+n
    n=n-1
  if m==total:
    print ("True")
  else:
    print ("False")
    
"""Sample
>>>pfct_num(28)
True
>>>pfct_num(90)
False
"""


#Author: Sharon Cao     Date: 9/25/2019
#Description:
#7. Implement a function to check if the number of bits from two positive input parameters is
#the same or not.
 """Return whether positive integers a and b have the same number of
digits.
 >>> same_ord(50, 70) # 2 bits of a and b
 True
 >>> same_ord(50, 100) # a is 2 bits; b is 3 bits
 False
 >>> same_ord(1000, 100000) # a is 4 bits; b is 6 bits
 False
"""
def same_ord(a, b):
  bitA =countBit(a)
  bitB = countBit(b)
  if bitA == bitB:
    print ("True")
  else:
    print ("False")

def countBit(n):
  counter=1
  while n//10 >0:
    n=n//10
    counter+=1
  #print (counter)
  return counter
 
 """Sample
>>>same_ord(1000, 10000)
False
>>>same_ord(987, 234)
True
"""

#Author: Sharon Cao     Date: 9/25/2019
#Description:
#8. Write a function that takes in a number and determines if the digits contain two adjacent
#5s.
def double_5(n):
"""Return true if n has two fives in a row.
 >>> double_5 (5)
 False
 >>> double_5 (55)
 True
 >>> double_5 (550055)
 True
 >>> double_5 (12345)
 False
 >>> double_5 (50505050)
 False
"""
def double_5(m):
  i=0
  while m//10 >0:
    if m%10==5:
      i+=1
      n=m//10
      if n%10==5:
        i+=1
        print("True")
        break
      else:
        i=0
    m=m//10
  if i==0:
    print ("False")
    
"""Sample    
>>>double_5(50505050)
False
>>>double_5(123558755)
True
""" 
   
#Author: Sharon Cao     Date: 9/25/2019
#Description:    
#9. Design a function that returns the number of unique digits in a positive integer.
def uniq_digits(x):
 """Return the number of unique digits in positive integer n
 >>> uniq_digits (8675309) # All are unique
 7
 >>> uniq_digits (1313131) # 1 and 3
 2
 >>> uniq_digits (13173131) # 1, 3, and 7
 3
 >>> uniq_digits (10000) # 0 and 1
 2
 >>> uniq_digits (101) # 0 and 1
 2
 >>> uniq_digits (10) # 0 and 1
 2
"""
def uniq_digits(x): 
  a=[]
  while x//10>0 or x%10>0:
    n=x%10
    if n not in a:
      a.append(n)
    x=x//10
  #print (a)
  print (len(a))

"""Sample
>>>uniq_digits(1373131)
3
>>>uniq_digits(3409872)
7
"""



#Author: Sharon Cao     Date: 9/25/2019
#Description:
#10. Write a def function “amc” with a positive integer “n” input parameter. It returns the
#smallest amicable number greater than “n”. Two different numbers are both amicable if
#the sum of the proper divisors of each is equal to the other. Any number that's part of such
#a pair is an amicable number.
#Hint: You may want to create a separate function to sum proper divisors.
def amc(n):
"""
Return the smallest amicable number greater than positive integer n.
 Every amicable number x has a buddy y different from x, such that
 the sum of the proper divisors of x equals y, and
 the sum of the proper divisors of y equals x.
 For example, 220 and 284 are both amicable because
 1 + 2 + 4 + 5 + 10 + 11 + 20 + 22 + 44 + 55 + 110 is 284, and
 1 + 2 + 4 + 71 + 142 is 220
 >>> amc(5)
 220
 >>> amc(220)
 284
 >>> amc(284)
 1184
 >>> r = amc(5000)
 >>> r
 5020
"""

def amc(n):
  i = n + 1
  while i < 10000:
    j = 0
    while j < 10000:
      if isAmicable(i, j):
        return i
      #print (i, j)  
      j += 1
    i += 1

def sumOfDiv(x):
  sum = 1
  for i in range(2, x):
    if x % i == 0:
      sum += i
  return sum

def isAmicable(a, b):
  if sumOfDiv(a) == b and sumOfDiv(b) == a and a!=b:
    return True
  else:
    return False

"""Sample
>>>print(amc(220)) 
>>>print(amc(279))   
>>>print(amc(5019))
>>>print(amc(1183))
284
284
5020
1184
"""

