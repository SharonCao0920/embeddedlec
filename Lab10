/*

1. What is the difference between a file opened with "r+" and one opened
with "w+" by writing the programs to verify what you understood?
*/

//w+
#include <stdio.h>
int main()
{
   FILE *fp;
   fp = fopen("test.txt", "w+");  //write and read mode
   fprintf(fp, "This is testing for fprintf...\n"); 

   rewind(fp); //rewind () function moves file pointer position to the beginning of the file.
   char ch;
   while((ch=getc(fp))!=EOF)
   putchar(ch);

   fclose(fp);
}  
/*
output:
This is testing for fprintf...
test.txt:
This is testing for fprintf...
*/

//r+
//beginning .txt file: This is testing for fprintf...
#include<stdio.h>
int main()
{
    FILE *fp;
    fp = fopen("test.txt", "r+");  //read and write mode
    char ch;
    while((ch=getc(fp))!=EOF)
    putchar(ch);
    rewind(fp); //rewind () function moves file pointer position to the beginning of the file.
    fprintf(fp, "This is testing for fprintf again...\n");
    fclose(fp);
    return 0;
}
/*
output:
This is testing for fprintf...

test.txt
This is testing for fprintf again...
*/


/*
2. Write a program to determine whether two binary files are identical. If they
are different, print the first byte number at which they differ.
*/

#include <stdio.h>
 
void compare_two_binary_files(FILE *,FILE *);
 
int main(int argc, char *argv[])
{
    FILE *fp1, *fp2;
    if (argc < 3)
    {
        printf("\nInsufficient Arguments: \n");
        printf("\nHelp:./executable <filename1> <filename2>\n");
        return;
    }
    else
    {
        fp1 = fopen(argv[1],  "r");
        if (fp1 == NULL)
        {
            printf("\nError in opening file %s", argv[1]);
            return;
        }
        fp2 = fopen(argv[2], "r");
 
        if (fp2 == NULL)
        {
            printf("\nError in opening file %s", argv[2]);
            return;
        }
        if ((fp1 != NULL) && (fp2 != NULL))
        {
            compare_two_binary_files(fp1, fp2);
        }
    }
}
 
//compare two binary files character by character
void compare_two_binary_files(FILE *fp1, FILE *fp2)
{
    char ch1, ch2;
    int flag = 0;
    while (((ch1 = fgetc(fp1)) != EOF) &&((ch2 = fgetc(fp2)) != EOF))
    {
        //character by character comparision
        if equal then continue by comparing till the end of files

        if (ch1 == ch2)
        {
            flag = 1;
            continue;
        }
       //If not equal then returns the byte position
        else
        {
            fseek(fp1, -1, SEEK_CUR);        
            flag = 0;
            break;
        }
    }
    if (flag == 0)
    {
        printf("Two files are not equal\n");
    }
    else
    {
        printf("Two files are Equal\n ");
    }
}

/*

3. Write a program to read a (binary) file of integers, sort the integers, and
write them back to the same file. Assume that all the numbers can be stored
in an array.
*/

#include <stdio.h>
 
void SelectionSort(int v[], int n)
{
    for(int i=0;i<n-1;i++)
    {
        int iMin=i;
        for(int j=i+1;j<n;j++)
        {
            if(v[j]<v[iMin])
                iMin=j;
        }
        int aux=v[i];
        v[i]=v[iMin];
        v[iMin]=aux;
         
    }
}
int main()
{
    FILE *f;
    f=fopen("test.txt", "r");
    if(f==NULL)
    {
        printf("Erro\n");
        return 0;
    }    
    int numbers[100], num, i=0;
    while(fscanf(f, "%d", &num)>0)
    {
        numbers[i]=num;
        i++;    
    }
    fclose(f);
    printf("%d numbers were read\n", i);
    SelectionSort(numbers, 61);
    for(int i=0;i<61;i++)
    {
        printf("%d --> %d\n", i, numbers[i]);
    }
    FILE *f2=fopen("test1.txt", "w");
    if(f==NULL)
    {
        printf("Erro\n");
        return 0;
    }
    fwrite(numbers, sizeof(int), 61,f2);
    fclose(f2);
}


4. Repeat exercise 3, but assume that only 20 numbers can be stored in
memory (in an array) at any one time.
Hint: you will need to use at least two additional files for temporary output.





/*
5. Write a program to read two sorted files of integers and merge the values to
a third sorted file.
*/
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
   // Open two files to be merged 
   FILE *fp1 = fopen("file1.txt", "r"); 
   FILE *fp2 = fopen("file2.txt", "r"); 
  
   // Open file to store the result 
   FILE *fp3 = fopen("file3.txt", "w"); 
   char c; 
  
   if (fp1 == NULL || fp2 == NULL || fp3 == NULL) 
   { 
         puts("Could not open files"); 
         exit(0); 
   } 
  
   // Copy contents of first file to file3.txt 
   while ((c = fgetc(fp1)) != EOF) 
      fputc(c, fp3); 
  
   // Copy contents of second file to file3.txt 
   while ((c = fgetc(fp2)) != EOF) 
      fputc(c, fp3); 
  
   printf("Merged file1.txt and file2.txt into file3.txt"); 
  
   fclose(fp1); 
   fclose(fp2); 
   fclose(fp3); 
   return 0; 
} 




6. Write a program to read a text file and produce another text file in which all
lines are less than some given length. Make sure and break lines in sensible
places; for example, avoid breaking words or putting isolated punctuation
marks at the beginning of a line.

