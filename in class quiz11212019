/*
Author: Sharon Cao                 Date: 11/21/2019

Description
1. Write a program to implement binary search in an array.
a. step1: read-in size of array and integer numbers to be saved in this array
from keyboard; and the number that you want to search
b. step2: sort these numbers in the array
c. step3: implement binary search to return the index of the number that you
want to seach
Inputs from keyboard:
Enter the size of array: 5
Enter integer numbers in this array: 5 3 4 1 2
Enter the number you want to search: 3
Output:
The index of 3 in the sorted array is 2
Notice that binary search is an efficient algorithm for finding an item from a
sorted list of items. It works by repeatedly dividing in half the portion of the list
that could contain the item, until you've narrowed down the possible locations to
just one
*/
#include <stdio.h>

 void sorting ();

 int binarySearch() ;

 int main()
 {
     int size;

     //read-in size
     printf("Enter the size of array: ");
     scanf("%d", &size);

     int a[size], n;
     //save array
     printf("Enter integer numbers in this array: ");
     for (int i=0; i<size; i++)
     {
         scanf("%d", &a[i]);
     }
     //read-in number to search
     printf("Enter the number you want to search: ");
     scanf("%d", &n);

    sorting (a,size);


    binarySearch(a, size, n);


    return 0;
 }




 void sorting (int c[], int size)
 {
	 for (int i=1; i<size; i++)
	 {
		 for (int j=0; j<size-i; j++)
		 {
			int temp;
			if (c[j]>c[j+1])
			{
				temp = c[j];
				c[j] = c[j+1];
				c[j+1] = temp;
			}
		 }
	 }

   //print the sorted array
   printf("Array after sorting: ");
   for (int i=0; i<size; i++)
   {
     printf ("%d ", c[i]);
   }

 }


int binarySearch(int a[], int size, int n)
{
   int first = 0;
   int last = size - 1;
   int middle = (first+last)/2;

   while (first <= last) {
      if (a[middle] < n)
         first = middle + 1;
      else if (a[middle] == n) {
         printf("\nThe index of %d in the sorted array is %d\n", n, middle);
         break;
      }
      else
         last = middle - 1;

      middle = (first + last)/2;
   }
   if (first > last)
      printf("\nNot found! %d isn't present in the list.\n", n);
}

/*Sample
Enter the size of array: 7
Enter integer numbers in this array: 5 3 7 9 1 2 4
Enter the number you want to search: 4
Array after sorting: 1 2 3 4 5 7 9
The index of 4 in the sorted array is 3

Process returned 0 (0x0)   execution time : 12.572 s
Press any key to continue.

Enter the size of array: 5
Enter integer numbers in this array: 5 1 8 9 2
Enter the number you want to search: 7
Array after sorting: 1 2 5 8 9
Not found! 7 isn't present in the list.

Process returned 0 (0x0)   execution time : 7.404 s
Press any key to continue.

*/
