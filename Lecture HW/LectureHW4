 /*1. Design a finance management system, and it’s functionalities are as follows:
a. Count total reimbursement expense for each employee
b. Calculate total amount for each type of receipt
Assume that there are total 3 types of receipts, and 3 employees with ID#1, #2 and
#3.
*/

#include <stdio.h>

int main(void)
{
    int n[3];   //define array for number of receipts for 3 employees
    //number for receipts for employees
    printf ("Enter receipts for 3 employees: ");
    for (int i=0; i<3; i++)
    {
        scanf("%d", &n[i]);
    }
 char type_1[n[0]],type_2[n[1]],type_3[n[2]];
 float amt_1[n[0]],amt_2[n[1]], amt_3[n[2]];
 float totalA=0, totalB=0, totalC=0, sum1=0, sum2=0,sum3=0;


  //for employee 1
 printf("Enter the %d receipts types and amounts for employee 1: \n", n[0]);
 for (int i=0; i<n[0]; i++)
 {
   //printf("enter %d char:\n", i+1);
   scanf("%s",&type_1[i]);      //change "%c" to "%s"
   scanf("%f", &amt_1[i]);

 }
//print to check
 for (int i=0; i<n[0]; i++)
{
   sum1 += amt_1[i];
   if (type_1[i]=='a' || type_1[i]=='A')
   {
       totalA += amt_1[i];
   }
   if (type_1[i]=='b' || type_1[i]=='B')
   {
       totalB += amt_1[i];
   }
   if (type_1[i]=='c' || type_1[i]=='C')
   {
       totalC += amt_1[i];
   }
   //printf("%c", type_1[i]);
   //printf(" %.2f\n", amt_1[i]);
 }

 //for employee 2
  printf("Enter the %d receipts types and amounts for employee 2: \n", n[1]);
 for (int i=0; i<n[1]; i++)
 {
   //printf("enter %d char:\n", i+1);
   scanf("%s",&type_2[i]);      //change "%c" to "%s"
   scanf("%f", &amt_2[i]);

 }
 for (int i=0; i<n[2]; i++)
{
   sum2 += amt_2[i];
   if (type_2[i]=='a' || type_2[i]=='A')
   {
       totalA += amt_2[i];
   }
   if (type_2[i]=='b' || type_2[i]=='B')
   {
       totalB += amt_2[i];
   }
   if (type_2[i]=='c' || type_2[i]=='C')
   {
       totalC += amt_2[i];
   }
   //printf("%c", type_2[i]);
   //printf(" %.2f\n", amt_2[i]);
 }

 //for employee 3
  printf("Enter the %d receipts types and amounts for employee 3: \n", n[2]);
 for (int i=0; i<n[2]; i++)
 {
   //printf("enter %d char:\n", i+1);
   scanf("%s",&type_3[i]);      //change "%c" to "%s"
   scanf("%f", &amt_3[i]);

 }
 for (int i=0; i<n[2]; i++)
{
   sum3 += amt_3[i];
   if (type_3[i]=='a' || type_3[i]=='A')
   {
       totalA += amt_3[i];
   }
   if (type_3[i]=='b' || type_3[i]=='B')
   {
       totalB += amt_3[i];
   }
   if (type_3[i]=='c' || type_3[i]=='C')
   {
       totalC += amt_3[i];
   }
   //printf("%c", type_3[i]);
   //printf(" %.2f\n", amt_3[i]);
 }
 printf("Employee ID      Amount\n");
 printf("     1           %.2f\n", sum1);
 printf("     2           %.2f\n", sum2);
 printf("     3           %.2f\n\n", sum2);
 printf("Receipt Type     Amount\n");
 printf("     A           %.2f\n", totalA);
 printf("     B           %.2f\n", totalB);
 printf("     C           %.2f\n", totalC);

 return 0;

}
/*Sample
Enter receipts for 3 employees: 5 3 4
Enter the 5 receipts types and amounts for employee 1:
A 1.0
A 2.0
C 1.0
B 1.0
C 1.0
Enter the 3 receipts types and amounts for employee 2:
B 1.0
C 2.0
C 1.0
Enter the 4 receipts types and amounts for employee 3:
B 1.0
A 1.0
C 1.0
A 1.0
Employee ID      Amount
     1           6.00
     2           4.00
     3           4.00

Receipt Type     Amount
     A           5.00
     B           3.00
     C           6.00

Process returned 0 (0x0)   execution time : 76.757 s
Press any key to continue.
*/


/*
2. Write a program to calculate sum of all elements on the edge of 2-D array.
Inputs from keyboard:
Enter how many matrix you have: 2
Enter how many rows and columns are in 1st matrix: 4 4
Enter each element for 1st matrix:
1 1 1 1
0 0 0 0
1 0 1 0
0 0 0 0
Enter how many rows and column in 2nd matrix: 3 3
Enter each element for 2
nd matrix:
3 4 1
3 7 1
2 0 1
Output:
5
15
Notice that outputs are sum of red color elements in array
*/

#include <stdio.h>

int main()
{
  int num;
  int r,c;
  printf("Enter how many matrix you have: ");
  scanf("%d", &num);
  int sum[num];
  for (int i=0; i<num; i++)
  {
      printf("Enter how many rows and columns are in %d", i+1);
      (i==0)? printf("st "):(i==1)? printf("nd "): (i==2)? printf("rd "):printf("th ");
      printf ("matrix: ");
      scanf("%d%d", &r, &c);

      int a[r][c];
      int total=0;
      printf("Enter each element for %d", i+1);
      (i==0)? printf("st "):(i==1)? printf("nd "): (i==2)? printf("rd "):printf("th ");
       printf ("matrix: \n");

      for (int x=0; x<r; x++)
      {
          for (int y=0; y<c; y++)
          {
              scanf("%d", &a[x][y]);

              if (x==0 || y==0 ||x==r-1||y==c-1)
              {
                  total += a[x][y];
              }

          }
      }

      sum[i]=total;
  }

  for (int i=0; i<num; i++)
  {
      printf("%d\n", sum[i]);
  }
  return 0;
}
/*Sample
Enter how many matrix you have: 2
Enter how many rows and columns are in 1st matrix: 4 4
Enter each element for 1st matrix:
1 1 1 1
1 0 1 0
0 0 0 0
1 0 1 0
Enter how many rows and columns are in 2nd matrix: 3 3
Enter each element for 2nd matrix:
3 4 1
3 7 1
2 0 1
Output:
7
15

Process returned 0 (0x0)   execution time : 60.740 s
Press any key to continue.

*/


/*
3. Generate a program to print 2-D array in traversal way as below
Inputs from keyboard:
Enter size of row and column: 3 4
Enter each element in the matrix:
1 2 4 7
3 5 8 10
6 9 11 12
Output:
1 2 3 4 5 6 7 8 9 10 11 12
*/

#include <stdio.h>

int main()
{
    int row, column;
    printf("Enter size of row and column: ");
    scanf ("%d%d", &row, &column);

    int a[row][column];
    printf("Enter each element in the matrix: \n");
    for (int i=0; i<row; i++)
    {
        for (int j=0; j<column; j++)
        {
            scanf("%d", &a[i][j]);
        }
    }

    //print matrix
    /*
    for (int i=0; i<row; i++)
    {
        for (int j=0; j<column; j++)
        {
            printf("%d ", a[i][j]);
        }
        printf("\n");
    }
    */
    int n;
    n=row+column;

    printf("Output: \n");
    for(int x=0; x<=n; x++)
    {
        for (int i=0; i<row; i++)
        {
            for (int j=0; j<column; j++)
            {
               if (i+j == x)
               {
                   printf("%d ", a[i][j]);
               }

            }
        }
    }
    return 0;
}
/*Sample
Enter size of row and column: 3 4
Enter each element in the matrix:
1 2 4 7
3 5 8 10
6 9 11 12
Output:
1 2 3 4 5 6 7 8 9 10 11 12
Process returned 0 (0x0)   execution time : 28.298 s
Press any key to continue.
*/




/*
4. In a hospital ward allocation management system, patients will be arranged to
different types, that is, general ward and ICU (Intensive Care Unit) based on the
patient health condition indicator, which is from 0 to 10. If the indicator is bigger 
than setup threshold value, the patient will be move to ICU. Assume that each
patient has three-digits ID. Write a program to print all patient IDs and condition
indicators in ICU.
Inputs from keyboard:
Enter how many patients currently there are, and threshold
value of ICU: 10 7.55
Enter each patient’s ID and condition indicator:
006 6.5
005 8.0
004 3.5
009 8.5
011 7.0
043 9.5
003 5.0
103 6.0
112 4.0
118 9.0
Outputs:
043 9.5
118 9.0
009 8.5
005 8.0
*/
#include <stdio.h>

void sortarray ();

int main()
{
    int pNum;
    float threshold;
    printf("Enter how many patients currently there are, and threshold\nvalue of ICU: ");
    scanf("%d %f", &pNum, &threshold);
    int id[pNum];
    float condition[pNum];

    printf("Enter each patient’s ID and condition indicator: \n");

    for (int i=0; i<pNum;  i++)
    {
        scanf("%d",&id[i]);
        scanf("%f", &condition[i]);
    }

    sortarray (condition, id, pNum);

    printf("Outputs: \n");

    for (int i=0; i<pNum; i++)
    {
        if (condition[i]>threshold)
        {
            printf("%03d %.2f\n", id[i], condition[i]);
        }
    }

   return 0;

}

void sortarray (float condition[], int id[], int pNum)
 {
	 for (int i=1; i<pNum; i++)
	 {
		 for (int j=0; j<pNum-i; j++)
		 {
			float temp1;
			int temp2;
			if (condition[j]<condition[j+1])
			{
				//swap for array condition1
				temp1 = condition[j];
				condition[j] = condition[j+1];
				condition[j+1] = temp1;

               //swap for array id1
				temp2 = id[j];
				id[j] = id[j+1];
				id[j+1] = temp2;
			}
		 }
	 }
 }
/* Sample
Enter how many patients currently there are, and threshold
value of ICU: 10 7.55
Enter each patient’s ID and condition indicator:
006 6.5
005 8.0
004 3.5
009 8.5
011 7.0
043 9.5
003 5.0
103 6.0
112 4.0
118 9.0
Outputs:
043 9.50
118 9.00
009 8.50
005 8.00

Process returned 0 (0x0)   execution time : 112.328 s
Press any key to continue.
*/

/*
5. Each molecule of Deoxyribonucleic Acid (DNA) is a double helix formed
from two complementary strands of nucleotides held together by hydrogen bonds
between G-C and A-T base pairs. Write a program to display this complementary
strand if given any one of stand with base A, T, G, C
Inputs from keyboard:
Enter one of strand in a molecule of DNA:
ATATGGATGGTGTTTGGCTCTG
Output:
Complementary strand:
TATACCTACCACAAACCGAGAC
Inputs from keyboard:
TCTCCGGTTGATT
Output:
Complementary strand:
AGAGGCCAACTAA
Inputs from keyboard:
Enter one of strand in a molecule of DNA:
ATATCTTGCGCTCTTGATTCGCATATTCT
Output:
Complementary strand:
TATAGAACGCGAGAACTAAGCGTATAAGA
Inputs from keyboard:
Enter one of strand in a molecule of DNA:
GCGTTTCGTTGCAA
Output:
Complementary strand:
CGCAAAGCAACGTT
Inputs from keyboard:
Enter one of strand in a molecule of DNA:
TTAACGCACAACCTAGACTT
Output:
Complementary strand:
AATTGCGTGTTGGATCTGAA
Notice that A & T and G & C are always pair 
*/
#include <stdio.h>

int main()
{
 char a[1000];
 printf("Inputs from keyboard: \n");

 gets(a);
 int i=0;
 printf("Output:\nComplementary strand: \n");
 while (a[i]!='\0')
 {
    if (a[i]=='A')
    {
      a[i]='T';
    }
    else if (a[i]=='T')
    {
      a[i]='A';
    }
    else if (a[i]=='G')
    {
      a[i]='C';
    }
    else if (a[i]=='C')
    {
      a[i]='G';
    }
    printf("%c", a[i]);
    i++;
 }

 return 0;
}

/*Sample
Inputs from keyboard:
AAATTTTTCCCCGGGG
Output:
Complementary strand:
TTTAAAAAGGGGCCCC
Process returned 0 (0x0)   execution time : 7.436 s
Press any key to continue.
*/
