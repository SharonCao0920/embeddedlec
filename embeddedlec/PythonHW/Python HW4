#Author: Sharon Cao
#Description:
#1. Write a high order function to make withdraw from the balance in bank account by nonlocal 
#variable.

 """
 Return the balance after withdrawal since inception
 >>> rem = mk_wd (100) # deposit $100 
 >>> rem(10)
 90
 >>> rem (20)
 70
 >>> rem (100)
 'Insufficient funds'
 """
def mk_wd(balance):
  def withdraw(amount):
    nonlocal balance 
    if amount > balance:
      print('Insufficient funds')
      return 
    balance = balance - amount 
    return balance
  return withdraw

rem = mk_wd (100)
print(rem(10))
print(rem(20))
print(rem(100))
"""
90
70
Insufficient funds
"""

#Author: Sharon Cao
#Description:
#2. Write a function that removes all instances of an element from a list.
def rm_all(elem, lst): 
""" 
>>> x = [3, 1, 2, 1, 5, 1, 1, 7] 
>>> rm_all (1, x) 
>>> x 
[3, 2, 5, 7] 
"""
def rm_all(elem, lst):
  for x in lst:
    if (x == elem):
      lst.remove(x)
      return rm_all(elem, lst)
  return lst

x = [3, 1, 2, 1, 5, 1, 1, 7] 
rm_all (1, x) 
print(x) 

"""
[3, 2, 5, 7]
"""


#Author: Sharon Cao
#Description:
#3. Write a function that takes in two values x and elem, and a list, and adds as many 
#‘elem’s to the end of the list as there are x’s. 
def add_many(x, elem, lst): 
""" 
Adds elem to the end of lst the number of times x occurs in lst. 
>>> lst = [1, 2, 4, 2, 1] 
>>> add_many (2, 5, lst) 
>>> lst 
[1, 2, 4, 2, 1, 5, 5] 
"""
def add_many(x, elem, lst):
  if (x == 0):
    return lst
  else: 
    while (x!=0):
      lst.append(elem)
      x = x-1
    return lst

lst = [1, 2, 4, 2, 1]
add_many(2, 5, lst)
print(lst)

"""
[1, 2, 4, 2, 1, 5, 5]
"""


#Author: Sharon Cao
#Description:
#4. Write a function to create a new list from given a “suits” list and a number list
def f (suits, numbers):
"""Creates a new list (2-element list as one element in a new list) with the given
suits and numbers. Each element in the returned list should be of the form
 [suit, number].
 >>> f (['S', 'C'], [1, 2, 3])
 [['S', 1], ['S', 2], ['S', 3], ['C', 1], ['C', 2], ['C', 3]]
 >>> f (['S', 'C'], [3, 2, 1])
 [['S', 3], ['S', 2], ['S', 1], ['C', 3], ['C', 2], ['C', 1]]
 >>> f ([], [3, 2, 1])
 []
 >>> f (['S', 'C'], [])
 []
"""
def f (suits, numbers):
    z=[[] for n in range(len(suits)*len(numbers))]
    i=0
    for x in range(0,len(suits)):     
        for y in range(0,len(numbers)):
            z[i]=suits[x],numbers[y]
            i+=1      
    return z

print(f (['S', 'C'], [1, 2, 3]))
print(f (['S', 'C'], [3, 2, 1]))
print(f ([], [3, 2, 1]))
print(f (['S', 'C'], []))
"""
[('S', 1), ('S', 2), ('S', 3), ('C', 1), ('C', 2), ('C', 3)]
[('S', 3), ('S', 2), ('S', 1), ('C', 3), ('C', 2), ('C', 1)]
[]
[]
"""

#Author: Sharon Cao
#Description:       
#5. Write a function to merge 2 sorted lists a and b, and then return a new list with a sorted 
#order by RECURSIVE calls.
def mrg(ls1, ls2):
 """Merges two sorted lists recursively.
 >>> mrg ([1, 3, 5], [2, 4, 6])
 [1, 2, 3, 4, 5, 6]
 >>> mrg ([], [2, 4, 6])
 [2, 4, 6]
 >>> mrg ([1, 2, 3], [])
 [1, 2, 3]
 >>> mrg ([5, 7], [2, 4, 6])
 [2, 4, 5, 6, 7]
 """
def mrg(ls1, ls2):
  return list(set(ls1 + ls2))

print(mrg([1, 3, 5], [2, 4, 6]))
print(mrg([], [2, 4, 6]))
print(mrg([1, 2, 3], []))
print(mrg([5, 7], [2, 4, 6]))

"""
[1, 2, 3, 4, 5, 6]
[2, 4, 6]
[1, 2, 3]
[2, 4, 5, 6, 7]
"""

#Author: Sharon Cao
#Description:
#6. Write the function to flatten the deep list.
def fltn(ls):
 """Return a new version of list as follows.
 >>> fltn ([1, 2, 3]) # normal list
 [1, 2, 3]
 >>> x = [1, [2, 3], 4] # deep list
 >>> fltn (x)
 [1, 2, 3, 4]
 >>> x = [[1, [1, 1]], 1, [1, 1]] # deep list
 >>> fltn (x)
 [1, 1, 1, 1, 1, 1]
 """
 def fltn(lst):
    if type(lst) != list:
        return [lst]
    else:
        return sum([fltn(x) for x in lst],[])

x = [1, 2, 3]
print(fltn(x))
x = [1, [2, 3], 4]
print(fltn(x))
x = [[1, [1, 1]], 1, [1, 1]]
print(fltn(x))

""""
[1, 2, 3]
[1, 2, 3, 4]                      
[1, 1, 1, 1, 1, 1]
""""





#Author: Sharon Cao
#Description:
#7. Define a function to check if the element exists in the list or not.
"""
>>> a = [ [1,[2]], 3, [ [4], [5,[6] ] ] ] 
>>> chk_elm (a, 6)
True
"""
def chk_elm(lst,n):
  def fltn(lst):
    if type(lst) != list:
      return [lst]
    else:
      return sum([fltn(x) for x in lst],[])
  y=fltn(lst)
  #print(y)
  if n in y:
      return True
  else:
      return False

a = [[1, [2]], 3, [[4], [5, [6]]]]
print(chk_elm(a, 6))

"""
True
"""

#Author: Sharon Cao
#Description:
#8. Write a function to check whether the input argument list is symmetric or not in 
#recursive call.
def sym(l):
 """Returns whether a list is symmetric or not
 >>> sym ([])
 True
 >>> sym ([1])
 True
 >>> sym ([1, 4, 5, 1])
 False
 >>> sym ([1, 4, 4, 1])
 True
 >>> sym (['l', 'o', 'l'])
 True
 """
 def sym(ls):
  if ls == ls[::-1]:
    return True
  else:
    return False

print(sym([]))
print(sym([1]))
print(sym([1, 4, 5, 1]))
print(sym([1, 4, 4, 1]))
print(sym(['l', 'o', 'l']))

"""
True
True
False
True
True
"""
 
 
 
#Author: Sharon Cao
#Description:
#9. Write a function in recursive call that takes in a list lst, a function g, and an initial 
#value m. This function will fold lst starting at the beginning. If lst is [1, 2, 3, 4, 5] then the 
#function g is applied as follows:
#g (g (g (g (g (m, 1), 2), 3), 4), 5)
#from operator import add, sub, mul
"""Return the result of applying the function g to the initial value m 
and the first element in lst, and repeatedly applying g to this result 
and the next element in lst until it reaches the end of the list.
 >>> s = [3, 2, 1]
 >>> fld (s, sub, 0) # sub(sub(sub(0, 3), 2), 1)
 -6
 >>> fld (s, add, 0) # add(add(add(0, 3), 2), 1)
 6
 >>> fld (s, mul, 1) # mul(mul(mul(1, 3), 2), 1)
 6
 >>> fld ([], sub, 100) # return m if s is empty
 100
 """
def fld(lst, g, m):
  if lst == []:
    return m
  else:
    m = g(m, lst[0])
    return fld(lst[1:], g, m)
def sub(a, b):
    return a-b
def add(a, b):
    return a+b
def mul(a, b):
    return a*b
    
s = [3, 2, 1]
print(fld(s, sub, 0))
print(fld(s, add, 0))
print(fld(s, mul, 1))
print(fld ([], sub, 100)) 

"""
-6
6
6
100
"""

#Author: Sharon Cao
#Description:
#10. Implement a function to create 2D array as follows
def create_2d_arr(rows, columns):
 """
 >>> create_2d_arr (3, 5)
 [['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-']]
 """
 def create_2d_arr(rows, columns):
  a = []
  for i in range(rows):
    b = []
    for j in range(columns):
      b += ['-']
    a += [b]
  return a
  
print(create_2d_arr(3, 5))

"""
[['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-'], ['-', '-', '-', '-', '-']]
"""
 
 
 
 
 
 
 