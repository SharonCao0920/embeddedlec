#Author: Sharon Cao
#Description:
#1. Write a function to find if a tree contains some value.
def has_itm(t, e):
 """
 >>> has_itm (tree(11, [tree(12), tree(13, [tree(14),tree(15)])] ), 11)
 True
 >>> has_itm (tree(11, [tree(12), tree(13, [tree(14),tree(15)])] ), 16)
 False
 """
class newNode:  
    def __init__(self, data):  
        self.data = data  
        self.left = None
        self.right = None
  
def has_itm(t, e):
    if (t == None):  
        return False
    if (t.data == e):  
        return True
    """ then recur on left sutree """
    res1 = has_itm(t.left, e)  
    if res1: 
        return True 
    """ node is not found in left, so recur on right subtree """
    res2 = has_itm(t.right, e)  
    return res2 
   
# Driver Code 
if __name__ == '__main__': 
    root = newNode(0)  
    root.left = newNode(1)  
    root.left.left = newNode(3)  
    root.left.left.left = newNode(7)  
    root.left.right = newNode(4)  
    root.left.right.left = newNode(8)  
    root.left.right.right = newNode(9)  
    root.right = newNode(2)  
    root.right.left = newNode(5)  
    root.right.right = newNode(6)  
    key = 4
    if (has_itm(root, key)):  
        print("YES" ) 
    else: 
        print("NO") 


print(has_itm (tree(11, [tree(12), tree(13, [tree(14),tree(15)])] ), 11))

print(has_itm (tree(11, [tree(12), tree(13, [tree(14),tree(15)])] ), 16)) 



#Author: Sharon Cao
#Description:
#2. Create a function to find the average value in a tree.
def ave_itm(t, e):
 """
 >>> ave_itm(tree(11, [tree(12), tree(13, [tree(14),tree(15)])]))
 13.0 # (11+12+13+14+15)/5 = 13.0
 """
 

def avg (tree):
  def helper (node, sum, count):
    if node is None:
      return (0, 0)
    else:
      (Lsum, Lcount) = helper(node.left, 0, 0)
      (Rsum, Rcount) = helper(node.right, 0, 0)
      return (node.data + Lsum + Rsum, 1 + Lcount + Rcount)
  (sum, count) = helper(tree, 0, 0)
  return sum/count if count > 0 else None

# your node class
class Node (object):
  def __init__(self, data, left, right):
    self.data = data
    self.left = left
    self.right = right

# make your tree
tree = Node(5, Node(3, Node(2, None, None), None), Node(6, None, None))

print(avg(tree)) #=> 4.0

# ensure that this works for an empty tree too (it does)
print(avg(None)) #=> None

#Author: Sharon Cao
#Description:
#3. From tree construction functions on the handout, write a function to generate tree for 
#Fibonacci series.
def tree_fib(n):
 """Construct a Fibonacci tree.
>>> tree_fib (1)
 [1]
 >>> tree_fib (3)
 [2, [1], [1, [0], [1]]]
 >>> tree_fib(5)
 [5, [2, [1], [1, [0], [1]]], [3, [1, [0], [1]], [2, [1], [1, [0], [1]]]]]
 """
 

#Author: Sharon Cao
#Description:
#4. Generate a def function to apply math operation function for all leaves in a tree.
def app_func_leaves(t, g):
 """
 >>> def triple(n):
 return 3*n
 >>> def square(m):
 return m*m 
 >>> t= tree(1,
[tree(2),
tree(3,
[tree(4),
tree(5)])
])
>>> app_func_leaves(t, triple)
 6 12 15 # leaves: 2, 4, 5
 >>> app_func_leaves(t, square)
 4 16 25 
 """
 

#Author: Sharon Cao
#Description:
#5. Define a function to replace all leaves in a tree with new values as return, but don’t 
#change original tree
def rpl_leaves(t, old, new):
"""
 t = tree('apple',
 [tree('banana',
 [tree('plum'),
 tree('pear')]),
 tree('peach',
 [tree('plum')]),
 tree('plum',
 [tree('berry'),
 tree('plum')]),
 tree('plum')])
 >>> s=rpl_leaves (t, 'plum', 'fig'))
>>> s
tree('apple',
 [tree('banana',
 [tree('fig'),
 tree('pear')]),
 tree('peach',
 [tree('fig')]),
 tree('plum',
 [tree('berry'),
 tree('fig')]),
 tree('fig')])
"""


#Author: Sharon Cao
#Description:
#6. Write a function to count a tree’s height, which is the length of the longest path from 
#the root to a leaf. 
class tree:
    def __init__(self,data): 
        self.left=None
        self.right=None
        self.data=data
    def insert(self,data): 
        if self.data:
            if(data<self.data):
                if self.left is None: 
                    self.left=tree(data)
                else:
                    self.left.insert(data)
            elif data>self.data: 
                if self.right is None: 
                    self.right=tree(data)
                else:
                    self.right.insert(data)
                  
def height(tree):   
    if tree is None: 
        return 0 ;
    else :
        height1 = height(tree.left) 
        height2 = height(tree.right) 
  
        if (height1 > height2): 
            return height1+1
        else:
            return height2+1
y=input("Enter value for root node (o or negative for no root) = ") 
if int(y)>0:
    root = tree(int(y)) 
    x=1
    while(int(x)>0): 
        x=input("Enter node value >0 to countinue and <=0 to stop=") # 
        if(int(x)>0):
            root.insert(int(x))   
    print("Height of tree is "+f'{height(root)}')
else:
    print("Height of tree is 0 there is no root")
"""
Enter value for root node (o or negative for no root) = 5
Enter node value >0 to countinue and <=0 to stop=8
Enter node value >0 to countinue and <=0 to stop=5
Enter node value >0 to countinue and <=0 to stop=3
Enter node value >0 to countinue and <=0 to stop=22
Enter node value >0 to countinue and <=0 to stop=6
Enter node value >0 to countinue and <=0 to stop=8
Enter node value >0 to countinue and <=0 to stop=9
Enter node value >0 to countinue and <=0 to stop=0
Height of tree is 4
"""


#Author: Sharon Cao
#Description:
#7. Return largest one in a numeric tree by a def function


#Author: Sharon Cao
#Description:
#8. Get the number of nodes in a tree from a def function
def num_nodes(t):
"""
t = tree('reptiles',
[tree('python',
[tree('anaconda')]),
tree('snake',
[tree('cobra'),
tree('viper')]),
tree('chameleon')])
 >>> num_nodes(t)
7
"""