#Author: Sharon Cao      Date: 10/5/2019
#Dscription:
#1. Define a function to implement the following operations

 """ A function that prints numbers in a specified
 range except those divisible by n, and print it with “Buzz!”
 Assume that the following example is to print numbers from 0 to (10-1),
 and print “Buzz!” at the location of the number divisible by 5
 >>> replace = fancy_printing (5)
 >>> replace(10)
 0
 Buzz!
 2
 3
 4
 Buzz!
 6
 7
 8
 9
 """
def fancy_printing (n):
  i=0
  while i<n: 
    if i==1 or i%5==0:
      if i==0:
         print (i)
      else:
        print ("Buzz!")
    else:
      print (i)
    i+=1

"""sample
>>>fancy_printing(10)
>>>0
>>>Buzz!
>>>2
>>>3
>>>4
>>>Buzz!
>>>6
>>>7
>>>8
>>>9
"""

#Author: Sharon Cao      Date: 10/5/2019
#Dscription:
#2. Write a function to add every other numbers from 0 or 1 until input parameter n in
#function RECURSION only.

 """Return the sum of every other natural number up to n, inclusive.
 >>> sum_num (4) # 0 + 2 + 4
 6
 >>> sum_num (5) # 1 + 3 + 5
 9
"""
def sum_num(n):
  if n == 0 or n == 1:
    return n
  return n + sum_num(n-2)

"""Sample
>>>print(sum_num(5))
>>>9
"""


#Author: Sharon Cao      Date: 10/5/2019
#Dscription: 
#3. Define a function cnt_primes(m), where m is a positive integer and returns the
#number of prime integers from 1 to m in function RECURSION only, given that a
#function is_prime(n) has been defined.
"""
>>> cnt_primes(6) # 1, 2, 3, 4, 5, 6
>>> 3 # 3 prime numbers from 1 to 6
"""
def cnt_primes(m):
  if m == 0:
    return 0
  if is_prime(m):
    return 1 + cnt_primes(m-1)
  else:
    return cnt_primes(m-1)

def is_prime(n):
    x=0
    if n!=2:  
      for i in range(2,n-1):  
        if (n % i) == 0:  
          x+=1  
      if x!=0 or n==1:
        return False
      else:
        return True
    else:
      return True
      
"""Sample
>>>print(cnt_primes(6))
3
"""

#Author: Sharon Cao      Date: 10/5/2019
#Dscription:
#4. If “f” is a function and n is a positive integer, then we can form the nth repeated
#application of f, which is defined to be the function whose value at x is f(f(...(f(x))).
#For example, if f adds 1 to its argument, then the nth repeated application
#of f adds n. Write a function that takes as inputs a function f and a positive
#integer n, and then returns the function that computes the nth repeated application
#of f:

 """Return the function that computes the nth application of f.
 >>> incr(5) # function is to add 1 for input argument number
 6
 >>> add3 = foo (incr, 3)
 >>> add3(5) # Doing like: incr(incr(incr(incr(incr(3)))))
 8
 >>> foo (triple, 5)(1) # triple(triple(triple(triple(triple(1)))))
 243
 >>> foo (square, 2)(5) # square(square(5))
 625
 >>> foo (square, 4)(5) # square(square(square(square(5))))
 152587890625
 """
def square(x):
  return x * x

def triple(x):
    return 3 * x

def identity(x):
    return x

def increment(x):
    return x + 1

def foo(f, n):
    def nth(x):
        i = n 
        while i > 0:
            x = f(x)
            i -= 1
        return x
    return nth
    
"""Sample
>>>add_three = foo(increment, 3)
>>>print(add_three(5))
8 
""" 
 
#Author: Sharon Cao      Date: 10/5/2019
#Dscription: 
#5. Calculate “ab+c” operation by function RECURSION. Other method can’t be
#allowed, only recursion function call.

 """Computes a * b+c 
 >>> op (2, 4, 3) # 2 * 4 + 3
11
 >>> op (0, 3, 2) # 0 * 3 + 2
 2
 >>> op (3, 0, 2) # 3 * 0 + 2
 2
"""

def op(a, b, c):
  if a == 0 or b == 0:
    return c
  if a-1 == 0:
    return b+c
  return b+op(a-1, b, c) 
  
"""Sample
>>>print(op (2, 4, 3))
11
"""

#Author: Sharon Cao      Date: 10/5/2019
#Dscription:
#6. Implement the function “checking”, which takes a positive integer as input and
#returns True if its digits, read left to right, are in non-decreasing order, 
#and False otherwise. For example, the digits of 5, 11, 127, and 1357 are ordered,
#but not those of 21 or 1375.

 """Return True if the (base 10) digits of X>0 are in non-decreasing
 order, and False otherwise.
 >>> checking (5)
 True
 >>> checking (11)
 True
 >>> checking (127) # 1<2<7
 True
 >>> checking (1357) # 1<3<5<7
 True
 >>> checking (21) # 2 > 1
 False
 >>> result = checking (1375) # 7 > 5
 >>> result
 False
 """
def checking(x):
  if x%10 < (x//10)%10:
    return False
  else:
    if x//10==0:
      return True
    else:
      return checking (x//10)

"""Sample
>>>print(checking(1357))
True
>>>print(checking(1375))
False
"""


#Author: Sharon Cao      Date: 10/5/2019
#Dscription: 
#7. Define a function to implement the following operation in RECURSIVE call only.
"""Return the product of n * (n - 2) * (n - 4) * ...
>>> cal (5) # 5 * 3 * 1
15
>>> cal (8) # 8 * 6 * 4 * 2 * 0
0
"""
def cal(n):
  if n==0 or n==1: 
    return n
  return n*cal(n-2)
 
 """Sample
>>>print(cal(5))
>>>print(cal(8)) 
15
0
"""

#Author: Sharon Cao      Date: 10/5/2019
#Dscription:
#8. Define a function to implement intersects, which takes a one-argument function f
#and argument “x”, returns a function g. It returns True if f(x)=g(x), otherwise False.

 """Returns a function that returns whether f intersects g at x.
 >>> at3 = intscts(square, 3)
 >>> at3 (triple) # triple(3) == square(3)
 True
 >>> at3 (increment) # triple(3) != square(3)
 False
 >>> at1 = intscts(identity, 1)
 >>> at1(square) # square(1) == identity(1)
 True
 >>> at1 (triple) # triple(1) != identity(1)
 False
 """
def square(x):
    return x * x

def triple(x):
    return 3 * x

def identity(x):
    return x

def increment(x):
    return x + 1

 
def intscts(f, x):
     def ret(g):
         if g(x) == f(x):
            return True
         return False
     return ret

"""    
>>>at3 = intscts(square, 3)  
>>>print (at3 (increment))
False""" 
 
#Author: Sharon Cao      Date: 10/5/2019
#Dscription: 
#9. Assume a mathematical function A(x), where x is positive number is defined by
#two cases:
#A(n) = n, if n <= 3
#A(n) =A(n - 1) + 2 * A(n - 2) + 3 * A(n - 3), if n > 3

 """Return the value of A(n), calculate in RECURSIVE call only
 >>> A(1)
 1
 >>> A(2)
 2
 >>> A (3)
 3
 >>> A (4) # A (3) + 2* A (2) + 3* A (1) = 3 + 2*2 + 3*1=10
 10
 >>> A (5) # A (4) + 2* A (3) + 3* A (2)=10 + 2*3 + 3*2 = 22
 22
 """
def A(n): 
  if n <= 3:
    return n
  else:
    return A(n - 1) + 2 * A(n - 2) + 3 * A(n - 3)

"""Sample   
>>>print (A(4))
10
"""
 
 
#Author: Sharon Cao      Date: 10/5/2019
#Dscription: 
#10. The bounce-back-forth sequence is a serial number from 1 and is always either counting up or 
#counting down. In kth number, the direction changes when k is divisible by 7 or contains the digit 7.
#The first 30 elements of the bounce-back-forthsequence are listed below, with direction change marked 
#in RED color at the 7th, 14 th,17 th, 21st, 27 th, and 28 th elements:
#Index number in the serial: 1 2 3 4 5 6  7  8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
#                            1 2 3 4 5 6 [7] 6 5 4   3  2  1 [0] 1 2  [3] 2  1 0 [-1] 0 1  2  3  4 [5] [4] 5 6
#Write a function bounce-back-forth that returns the kth element of the bounce-backforth
#sequence.

 """Return the k
th element of the bounce-back-forth sequence.
 >>> bnc_bck_frth (7)
 7
 >>> bnc_bck_frth (8)
 6
 >>> bnc_bck_frth (15)
 1
 >>> bnc_bck_frth (21)
-1
>>> bnc_bck_frth (22)
0
>>> bnc_bck_frth (30)
6
 >>> bnc_bck_frth (68)
 2 
 >>> bnc_bck_frth (69)
 1
 >>> bnc_bck_frth (70)
 0
 >>> bnc_bck_frth (71)
 1
 >>> bnc_bck_frth (72)
 0
 >>> bnc_bck_frth (100)
 2
"""
def bnc_bck_frth(k):  
  step, num = 1, 1
  increment = 1
  while step < k:
    if step % 7 == 0 or has_seven(step):
      increment = increment * -1
    num = num + increment
    step += 1
  return num

def has_seven(n):
    if n % 10 == 7:
        return True
    elif n < 10:
        return False
    else:
        return has_seven(n // 10)
        
"""Sample
>>>print (bnc_bck_frth(17))
3
>>>print (bnc_bck_frth(100))
2
"""

