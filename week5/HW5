/*
Author: Sharon Cao              Date: 9/30/2019

Description:
1. Find multiplication of two matrices. 
 
Output: 
 
Enter 2-dimensional array size: 2  3 

Enter numbers for each element in two arrays:  1 2 3 4 5 6 1 4 2 5 3 6 
 
Result after multiplication of two arrays:    
14 32                                                                                 
32 77 
 
Hint: rule of multiplication for two arrays 
 
 */
#include <stdio.h>
 
 
 int main ()
 {   
    //declaration and instructions
	int row, column;
	int a [row][column], b [column][row];
	
	//read and stroe array a input
	printf("Enter row size of array:\n");
	scanf ("%d", &row);
	
	printf("Enter column size of array:\n");
	scanf ("%d", &column);
	
	printf ("Enter numbers for each element in two arrays: ");
	
	//read and save number entered into array
	for (int i=0; i < row; i++)
	{ 
      for (int j=0; j<column; j++)
	  {
      scanf("%d", &a[i][j]);
	  }
	}
	
	//read and save number entered into array
	for (int i=0; i < column; i++)
	{ 
      for (int j=0; j< row; j++)
	  {
      scanf("%d", &b[i][j]);
	  }
	}
	
	//print array a
	for (int i=0; i < row; i++)
	{ 
      for (int j=0; j<column; j++)
	  {
      printf("%d", &a[i][j]);
	  }
	}
	//print array b
	for (int i=0; i < column; i++)
	{ 
      for (int j=0; j< row; j++)
	  {
      printf("%d", &b[i][j]);
	  }
	}
	int c[row][row], sum=0;
	for (int i=0; i<row; i++)
	{
		for (int j=0; j<row; j++)
		{
			for (int x=0; x<row; x++)
			{
				for (int y=0; y<column; y++)
				{
							printf ("%d * %d\n", a[x][y], b[y][x]);
							sum += a [x][y] * b[y][x];
				}
			}
			c[i][j]=sum;
		}
	}
	
	printf ("Result after multiplication of two arrays: \n");
	
    for (int i=0; i<row; i++)
	{
		for (int j=0; j<row; j++)
		{
			printf ("%d ", c[i][j]);
			if (i == row-1);
			{
				printf ("\n");
			}
		}
	}

	return 0;
	  
 }







 
/*
Author: Sharon Cao       Date: 9/30/2019

Description:
5. Study functions "strcpy()" and "strrev()" in C language, 
and then write a program to check if a string is palindrome or not 
 
Output:  

Enter a string: abc 
 
Result: not a palindrome string 
 
Enter a string: radar 
 
Result: yes, it is a palindrome string 
 
Hint: other examples of palindrome word, such as  
 
refer, level, mom, madam, rotor, … … 
*/

#include <stdio.h>
#include <string.h>
 
int main()
{
  char strA[1000], strB[1000];
 
  printf("Enter a string: \n");
  gets(strA);
  
  // Copy the input strA to strB
  strcpy(strB, strA);  
  
  // Reverse strB
  strrev(strB);  
 
  // Compare the two string
  if (strcmp(strA, atrB) == 0)  
    printf("Yes, it is a palindrome string.\n");
  else
    printf("Not a palindrome string .\n");
 
  return 0;
}


/*
Author: Sharon Cao       Date: 9/30/2019

Description:
6. Merging one-dimensional array - excluding repeating element 
 
Output: 
Enter the size of 1st array: 3 
Enter each element:  3  5  7 
Enter the size of 2nd  array: 3 
Enter each element:  2  5  9 
 
Result of merging:  3 5 7 2 9 
*/

#include<stdio.h>
 
int main() {
 int arr1[30], arr2[30], res[60];
 int i, j, k, n1, n2;
 
 printf("\nEnter no of elements in 1st array :");
 scanf("%d", &n1);
 for (i = 0; i < n1; i++) {
 scanf("%d", &arr1[i]);
 }
 
 printf("\nEnter no of elements in 2nd array :");
 scanf("%d", &n2);
 for (i = 0; i < n2; i++) {
 scanf("%d", &arr2[i]);
 }
 
 i = 0;
 j = 0;
 k = 0;
 
 // Merging starts
 while (i < n1 && j < n2) {
 if (arr1[i] <= arr2[j]) {
 res[k] = arr1[i];
 i++;
 k++;
 } else {
 res[k] = arr2[j];
 k++;
 j++;
 }
 }
 
 /* Some elements in array 'arr1' are still remaining
 where as the array 'arr2' is exhausted */
 
 while (i < n1) {
 res[k] = arr1[i];
 i++;
 k++;
 }
 
 /* Some elements in array 'arr2' are still remaining
 where as the array 'arr1' is exhausted */
 
 while (j < n2) {
 res[k] = arr2[j];
 k++;
 j++;
 }
 
 '
 //Displaying elements of array 'res'
 printf("\nMerged array is :");
 for (i = 0; i < n1 + n2; i++)
 printf("%d ", res[i]);
 
 return (0);
 
}




/*
Author: Sharon Cao          Date: 9/30/2019

Description:
7. Write a program to print binomial coefficient table 
 
Output: Enter the order of binomial power expression: 3 
 
Results of printing on monitor:  1 1 1 1 2 1 1 3 3 1 
 
Enter the order of binomial power expression: 6   
Results of printing on monitor:  1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 
 
Hint: binomial power expression is like (1 + 𝑥)𝑛 = ∑ (𝑛 𝑘)𝑥𝑘𝑛 𝑘=0 and binomial coefficients  (𝑛 𝑘) = 𝑛! 𝑘!(𝑛−𝑘)!
 e.g (1 + 𝑥)0 = 1 and coefficients: 1 (1 + 𝑥)2 = 1 + 2𝑥 + 𝑥2 and coefficients: 1  2  1  (1 + 𝑥)5 = 1 + 5𝑥 + 10𝑥2 + 10𝑥3 + 5𝑥4 + 𝑥5 and coefficients: 1 5 10 10 5 1 
*/

#include <stdio.h> 
  
// Function to print binomial table 
int printbinomial(int max) 
{ 
    for (int m = 0; m <= max; m++) { 
        printf("%2d", m); 
        int binom = 1; 
        for (int x = 0; x <= m; x++) { 
  
            // B(m, x) is 1 if either m or x is 
            // is 0. 
            if (m != 0 && x != 0) 
  
                // Otherwise using recursive formula 
                // B(m, x) = B(m, x - 1) * (m - x + 1) / x 
                binom = binom * (m - x + 1) / x; 
  
            printf("%4d", binom); 
        } 
        printf("\n"); 
    } 
} 
  
// Driver Function 
int main() 
{ 
    int max = 10; 
    printbinomial(max); 
    return 0; 
} 
 

 
 
 
 

 
 
/*
Author: Sharon Cao      Date: 9/30/2019

Description:
10. Calculate standard deviation by C program 
Output: Enter size of the array: 8 
Enter numbers for each element: 10  12  23  23  16  23  21  16 
 
Result of Standard Deviation: 4.8989794855664 
 
Hint: calculation equation is as follows 
 
   Where μ is mean value 
 
As below is the online S.D. calculator for your program debugging  
 
https://www.calculator.net/standard-deviationcalculator.html?numberinputs=10%2C+12%2C+23%2C+23%2C+16%2C+23%2C+21%2C+16&ctype=p&x=82&y=17 
 */