/*
1. Write program to delete duplicate elements in an array
Output:
Enter size of array: 5
Enter each element for the given array: -1 0 -1 0 2

Results: -1 0 2
*/
#include <stdio.h>
 
 void sortarray ();
 
 int main ()
 {   
     //declaration 
	 int size;
	 
	 //instructions and read inputs from keyboard
	 printf ("Enter size of the array: ");
	 scanf("%d", &size);
	 
	 //read and save inputs into array
	 int a[size];
	 printf("Enter numbers for each element: ");
	 for (int i=0; i<size; i++)
	 {
		 scanf("%d", &a[i]);
	 }

    //sorting
	sortarray (a, size);
    
    //print the remaining after removing duplicate
    printf ("Results of removing duplicate: ");
    
    //loop to remove duplicate
	 for (int i=0; i<size-1; i++)
  {
	  if (a[i]<a[i+1])
	  {
		  printf ("%d ", a[i]);
	  }
    if (i==size-2 && a[i]<=a[i+1])
    {
      printf("%d", a[i+1]);
    }
  }
	 return 0;
 }
 
 //function to sort array
 void sortarray (int a[], int size)
 {
	 for (int i=1; i<size; i++)
	 {
		 for (int j=0; j<size-i; j++)
		 {
			int temp;
			if (a[j]>a[j+1])
			{
				temp = a[j];
				a[j] = a[j+1];
				a[j+1] = temp;
			}		 
		 }
	 }
   /*
   for (int i=0; i<size; i++)
   {
     printf ("%d", a[i]);
   }
   */
 } 
 
/* Sample
Enter size of the array: 11
Enter numbers for each element: 5 3 8 0 1 0 4 7 7 7 4
Results of removing duplicate: 0 1 3 4 5 7 8
*/




/*
2. Find a program to get all permutations from a series of different numbers
Output:
Enter each element for the given array: 5 8 7

All permutations: 587 578 857 875 758 785
*/

#include<stdio.h>
 
void print(int *, int );

int main()
{
  int temp;
  int i, j;
  int n;
	printf ("Enter size of the array: ");
	scanf("%d", &n);
  
  int num[n];
  printf("Enter each element for the given array: ");
    for (i = 0 ; i < n; i++)
    {
      scanf("%d", &num[i]);
    } 
    printf("All permutations: ");
    for (j = 1; j <= n; j++) 
    {
        for (i = 0; i < n-1; i++) 
        {
            temp = num[i];
            num[i] = num[i+1];
            num[i+1] = temp;
            print(num, n);
	      }
    }
    return 0;
}

void print(int *num, int n)
{
    int i;
    for ( i = 0 ; i < n ; i++)
    {
       printf("%d", num[i]);
    }
    printf(" ");
}

/* Sample
Enter size of the array: 3
Enter each element for the given array: 5 7 8
All permutations: 758 785 875 857 587 578
*/


/*
3. Create a program to print the following triangle pattern
Output:
Enter the number of lines you want to print: 7

Results:
1
2 3
4 5 6
7 8 9 10
1112 13 14 15
16 17 18 19 20 21
22 23 24 25 26 27 28
*/

#include <stdio.h>

int main()
{
	int num;
	printf ("Enter the number of lines you want to print: ");
	scanf("%d", &num);

  int ctr=1;
	for (int i=1; i<=num; i++)
	{
		for (int j=0; j<i; j++)
		{
          printf("%d ", ctr);
          ctr++;
		}
		printf("\n");
	}
    return 0;
}

/*Sample
Enter the number of lines you want to print: 9
1
2 3
4 5 6
7 8 9 10
11 12 13 14 15
16 17 18 19 20 21
22 23 24 25 26 27 28
29 30 31 32 33 34 35 36
37 38 39 40 41 42 43 44 45
*/


/*
4. Write a program to check whether two given strings are anagram of each
other or not. An anagram of a string is another string that contains same
characters, only the order of characters can be different. For example,
“abcd” and “dabc” are anagram of each other.
Output:
Enter the first string: abcd
And second string: dabc
Results: Yes
*/

#include <stdio.h>
 
int check_anagram(char [], char []);
 
int main()
{
  char a[1000], b[1000];
 
  printf("Enter the first string:");
  gets(a);
 
  printf("And second string:");
  gets(b);
  printf("Result: ");
  
  if (check_anagram(a, b) == 1)
    printf("Yes\n");
  else
    printf("No\n");
 
  return 0;
}
 
int check_anagram(char a[], char b[])
{
  int first[26] = {0}, second[26] = {0}, c=0;
 
  while (a[c] != '\0')
  {
    first[a[c]-'a']++;
    c++;
  }
 
  c = 0;
 
  while (b[c] != '\0')
  {
    second[b[c]-'a']++;
    c++;
  }
 
  // Comparing frequency of characters
 
  for (c = 0; c < 26; c++)
  {
    if (first[c] != second[c])
      return 0;
  }
 
  return 1;
}

/*Sample
Enter the first string:acddc
And second string:adcdc
Result: Yes
*/


/*
5. Find a program to calculate the element frequency from an array
Output:
Enter size of array: 5
Enter each element for the given array: 4 5 3 5 3
Frequency for each element: 4-1 5-2 3-2
*/

#include <stdio.h>

int main()
{
	int size,ctr;
	printf ("Enter size of array: ");
	scanf("%d", &size);
	
	int a[size],fr1[size];
	printf ("Enter each element for the given array: ");
	for (int i=0; i<size; i++)
	{
		scanf("%d", &a[i]);
		fr1[i] = -1;
	}

  for(int i=0; i<size; i++)
  {
    ctr = 1;
    for(int j=i+1; j<size; j++)
    {
      if(a[i]==a[j])
      {
        ctr++;
        fr1[j] = 0;
      }
    }

    if(fr1[i]!=0)
    {
      fr1[i] = ctr;
    }
  }
  
  printf("The frequency of all elements of array : ");
  for(int i=0; i<size; i++)
  {
    if(fr1[i]!=0)
    {
      printf("%d-%d ", a[i], fr1[i]);
    }
  }
	
return 0;	

}
/*Sample
Enter size of array: 7
Enter each element for the given array: 4 1 3 1 5 7 4
The frequency of all elements of array : 4-2 1-2 3-1 5-1 7-1
*/


/*
6. Work your way through the following code fragments. What would be
printed? When you have decided, compile and run the program to check
your answers. You will find it helpful, especially with some of the other
exercises, to draw boxes representing the variables and arrows representing
the pointers.
*/

#include <stdio.h>

int main()
{
	int i=-23;
	int *p = &i;
	
	printf("*p=%i\n", *p); //-23
	
	return 0;
}

{
int i;
int *p = &i;

printf("*p=%i\n", *p);  //0
}
{
int i=48;
int *p;
	
printf("*p=%i\n", *p); //0   =====> result=1
}
{
int i=10;
int *p = &i;
int j;

j=++*p;
	
printf("j=%i\n", j); //11
printf("i = %i\n", i); //11
}


